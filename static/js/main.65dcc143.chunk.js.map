{"version":3,"sources":["components/weatherCard/weatherCard.tsx","components/weatherCard/compareCard.tsx","components/input/textInput.tsx","components/weatherCard/errorCard.tsx","pages/home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CompareCard","temp","minTemp","maxTemp","weather","icon","feelsLike","description","city","compareHandler","className","src","alt","type","onClick","WeatherCard","closeHandler","idInfo","TextInput","cityInputHandler","cityClickHandler","value","action","onSubmit","e","preventDefault","onChange","Error","errorTitle","errorMesage","Home","cityId","uuidv4","axios","defaults","params","appid","useState","forcast","setForcast","setWeather","setCity","inputCity","setInputCity","cityList","setCityList","errorInfo","setErrorInfo","useEffect","url","q","units","Object","entries","reduce","acc","key","get","then","response","console","log","data","main","catch","red","green","blue","tempImage","tempColor","background","iconWeather","target","inputChangeHandler","style","backgroundImage","backgroundColor","temp_min","temp_max","feels_like","cityInfo","find","item","name","open","color","id","filter","map","comp","newCityList","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.65dcc143.chunk.js","sourcesContent":["import React from 'react';\r\nimport './styleCard.css';\r\n\r\ntype Props = {\r\n  temp: number | undefined;\r\n  minTemp: number | undefined;\r\n  maxTemp: number | undefined;\r\n  weather: string | undefined;\r\n  icon: string | undefined;\r\n  feelsLike: number | undefined;\r\n  description: string | undefined;\r\n  city: string | undefined;\r\n  compareHandler: ()=> void;\r\n\r\n};\r\n\r\nconst CompareCard = ({ temp, minTemp, maxTemp, weather, icon, \r\n  feelsLike, description, city, compareHandler }: Props) => {\r\n  return (\r\n    <>\r\n      <h1 className=\"city--name\">{city}</h1>\r\n      <div className='card--wrapper'>\r\n        <div className=\"main-forcast\">\r\n          <div className='main--weather'>\r\n            <img src={icon} alt=\"\" />\r\n            <span>{weather}</span>\r\n          </div>\r\n          <h1 className='temp'>{temp}°</h1>\r\n        </div>\r\n        <div className=\"secondary--forcast\">\r\n          <h2>Feels like {feelsLike}°</h2>\r\n          <span>min {minTemp}° </span>\r\n          <span>max {maxTemp}°</span>\r\n          <p>{description}</p>\r\n          <button type=\"button\" onClick={()=> compareHandler()}>Add to compare</button>\r\n        </div>\r\n      </div> \r\n    </>\r\n  );\r\n};\r\n\r\nexport default CompareCard; ","import React from 'react';\r\nimport './styleCard.css';\r\n\r\ntype Props = {\r\n  temp: number | undefined;\r\n  minTemp: number | undefined;\r\n  maxTemp: number | undefined;\r\n  weather: string | undefined;\r\n  icon: string | undefined;\r\n  feelsLike: number | undefined;\r\n  description: string | undefined;\r\n  city: string | undefined;\r\n  closeHandler: () => void;\r\n  idInfo: string | undefined;\r\n \r\n\r\n};\r\n\r\nconst WeatherCard = ({ temp, minTemp, maxTemp, weather, icon,\r\n  feelsLike, description, city, closeHandler, idInfo}: Props) => {\r\n  return (\r\n    <div className=\"compare--wrapper__big\">\r\n      <h1 className=\"city--name\">{city}</h1>\r\n      <div className='card--wrapper__compare'>\r\n        <div className='main--weather'>\r\n          <img src={icon} alt=\"\" />\r\n          <span>{weather}</span>\r\n        </div>\r\n        <h1 className='temp--small'>{temp}°</h1>\r\n        <h2>Feels like {feelsLike}°</h2>\r\n        <span>min {minTemp}° </span>\r\n        <span>max {maxTemp}° </span>\r\n        <p>{description}</p>  \r\n      </div>\r\n      <button className='close--button' type=\"button\" onClick={() => closeHandler()}>X</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherCard; ","import React from 'react';\r\nimport './input.css';\r\n\r\ntype Props = {\r\n  cityInputHandler: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  cityClickHandler: () => void; \r\n  value: string;\r\n};\r\n\r\nconst TextInput = ({ cityInputHandler, cityClickHandler, value }: Props) => {\r\n  return (\r\n    <div className='form--wrapper'>\r\n      <form \r\n        className='from'\r\n        action='submit'\r\n        onSubmit={(e) => e.preventDefault()}\r\n      >\r\n        <input \r\n          className='input'\r\n          type=\"text\"\r\n          value={value}\r\n          onChange={(e) => cityInputHandler(e)}\r\n          \r\n          \r\n        />\r\n        <button \r\n          className='form--button'\r\n          type=\"submit\"\r\n          onClick={() => cityClickHandler()}\r\n          \r\n        >Chose\r\n        </button>\r\n      </form>\r\n    </div> \r\n  );\r\n};\r\n\r\nexport default TextInput;","import { type } from 'os';\r\nimport React from 'react';\r\nimport './styleCard.css';\r\n\r\ntype Props = {\r\n  errorTitle: string\r\n  errorMesage: string\r\n};\r\n\r\nconst Error = ({ errorTitle, errorMesage }: Props) => {\r\n\r\n  return (\r\n    <div className='error--card'>\r\n      <h3>{errorTitle}</h3>\r\n      <p>{errorMesage}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Error;\r\n","import React, { useEffect, useState } from 'react';\r\nimport './pages.css';\r\nimport 'flexboxgrid';\r\nimport axios from 'axios';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport WeatherCard from '../components/weatherCard/weatherCard';\r\nimport CompareCard from '../components/weatherCard/compareCard';\r\nimport TextInput from '../components/input/textInput';\r\nimport Error from '../components/weatherCard/errorCard';\r\n\r\ntype Forcast = {\r\n  temp: number | undefined;\r\n  feels_like: number | undefined;\r\n  temp_min: number | undefined;\r\n  temp_max: number | undefined;\r\n\r\n};\r\ntype Weather = {\r\n  main: string | undefined;\r\n  description: string | undefined;\r\n  icon: string | undefined;\r\n};\r\n\r\ntype CityList = {\r\n  name: string | undefined;\r\n  open: boolean | undefined;\r\n  temp: number | undefined;\r\n  main: string | undefined;\r\n  description: string | undefined;\r\n  icon: string | undefined;\r\n  feels_like: number | undefined;\r\n  temp_min: number | undefined;\r\n  temp_max: number | undefined;\r\n  color: string | undefined;\r\n  id: string | undefined;\r\n};\r\n\r\n\r\nconst Home = () => {\r\n\r\n  const cityId = uuidv4();\r\n\r\n  axios.defaults.params = {\r\n    appid: '1d9b71f98edb0748224fcf68d948a166'\r\n  };\r\n\r\n  const [forcast, setForcast] = useState<Forcast>();\r\n  const [weather, setWeather] = useState<Weather>();\r\n  const [city, setCity] = useState('Riga');\r\n  const [inputCity, setInputCity] = useState('');\r\n  const [cityList, setCityList] = useState<CityList[]>([]);\r\n  const [errorInfo, setErrorInfo] = useState(false);\r\n\r\n  const objectToApiUrl = (params: Object) => {\r\n    return Object.entries(params).reduce((acc, [key, value]) => {\r\n      let accCopy = acc;\r\n      accCopy += `${key}=${value}&`;\r\n      return accCopy;\r\n    }, 'https://api.openweathermap.org/data/2.5/weather?');\r\n  };\r\n\r\n  useEffect(() => {\r\n    const url = objectToApiUrl({\r\n      q: city,\r\n      units: 'metric',\r\n    });\r\n    axios.get(url)\r\n      .then(response => {\r\n        console.log(response.data);\r\n        setWeather(response.data.weather[0]);\r\n        setForcast(response.data.main);\r\n        setErrorInfo(false);\r\n      })\r\n      .catch(() => {\r\n        console.log('Error!!!');\r\n        setErrorInfo(true);\r\n      }\r\n      );\r\n\r\n  }, [city]);\r\n\r\n  const inputChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setInputCity(e.target.value);\r\n  };\r\n  const cityClickHandler = () => {\r\n    setCity(inputCity);\r\n    setInputCity('');\r\n  };\r\n  const compareHandler = (idInfo: string, cityInfo: string) => {\r\n\r\n    const newCity = cityList.find(item => \r\n      item.name === cityInfo && item.open === true);\r\n\r\n    if (newCity) {\r\n      console.log('Already exist');\r\n\r\n    } else {\r\n      setCityList([\r\n        ...cityList,\r\n        {\r\n          name: city,\r\n          open: true,\r\n          temp: forcast?.temp,\r\n          main: weather?.main,\r\n          description: weather?.description,\r\n          icon: weather?.icon,\r\n          feels_like: forcast?.feels_like,\r\n          temp_min: forcast?.temp_min,\r\n          temp_max: forcast?.temp_max,\r\n          color: tempColor,\r\n          id: idInfo\r\n        }\r\n      ]);\r\n    }\r\n  };\r\n\r\n  const closeHandler = (comp: string | undefined) => {\r\n    cityList.map((item) => {\r\n      const newCityList = [...cityList];\r\n      // eslint-disable-next-line no-param-reassign\r\n      item.id === comp && (item.open = !item.open);\r\n      setCityList(newCityList);\r\n    }\r\n    );\r\n  };\r\n\r\n  let red = 255;\r\n  let green = 255;\r\n  let blue = 255;\r\n  let tempImage = 1056;\r\n\r\n  // @ts-ignore \r\n  if (forcast?.temp > 0) {\r\n    // @ts-ignore \r\n    green -= forcast?.temp * 3.12;\r\n    // @ts-ignore \r\n    blue -= forcast?.temp * 5.1;\r\n    // @ts-ignore  \r\n  } else if (forcast?.temp <= 0) {\r\n    // @ts-ignore \r\n    green += forcast?.temp * 3.12;\r\n    // @ts-ignore \r\n    red += forcast?.temp * 5.1;\r\n  }\r\n  const tempColor = `${red},${green},${blue},0.5`;\r\n  // @ts-ignore \r\n  if (weather?.main === 'Snow') {\r\n    tempImage = 1000;\r\n  } else if (weather?.main === 'Rain') {\r\n    tempImage = 115;\r\n  } else if (weather?.main === 'Sunny') {\r\n    tempImage = 206;\r\n  } else if (weather?.main === 'Clouds') {\r\n    tempImage = 1056;\r\n  } else {\r\n    tempImage = 114;\r\n  }\r\n\r\n  const background = `https://picsum.photos/id/${tempImage}/1000/350/?blur=7`;\r\n  const iconWeather = `http://openweathermap.org/img/wn/${weather?.icon}@2x.png`;\r\n\r\n\r\n  return (\r\n    <div className='container'>\r\n      <div className=\"row\">\r\n        <div\r\n          className=\"col-md-offset-3 col-md-6 col-xs-12\"\r\n        >\r\n          <TextInput\r\n            value={inputCity}\r\n            cityInputHandler={(e) => inputChangeHandler(e)}\r\n            cityClickHandler={cityClickHandler}\r\n          />\r\n          <div\r\n            className=\"card--background\"\r\n            style={{\r\n              backgroundImage: `url(${background})`\r\n            }}\r\n          >\r\n            <div\r\n              className=\"color--overlay\"\r\n              style={{\r\n                backgroundColor: `rgb(${tempColor})`,\r\n              }}\r\n            >\r\n              {errorInfo && \r\n              <Error\r\n                errorTitle=\"Sorry, we did not found this city\"\r\n                errorMesage=\"Please check if you have correct name of city.\"\r\n              />}\r\n              <WeatherCard\r\n                city={city}\r\n                temp={forcast?.temp}\r\n                minTemp={forcast?.temp_min}\r\n                maxTemp={forcast?.temp_max}\r\n                weather={weather?.main}\r\n                icon={iconWeather}\r\n                feelsLike={forcast?.feels_like}\r\n                description={weather?.description}\r\n                compareHandler={() => compareHandler(cityId, city)}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n\r\n        {cityList.filter(item => item.open === true).map((item) =>\r\n          // eslint-disable-next-line react/jsx-key\r\n          <div className=\" col-sm-6 col-xs-12 col-md-3\">\r\n            <div\r\n              className=\"color--overlay__compare\"\r\n              style={{\r\n                backgroundColor: `rgb(${item.color})`,\r\n              }}\r\n            >\r\n              <CompareCard\r\n                city={item.name}\r\n                temp={item.temp}\r\n                minTemp={item.temp_min}\r\n                maxTemp={item.temp_max}\r\n                weather={item.main}\r\n                icon={`http://openweathermap.org/img/wn/${item.icon}@2x.png`}\r\n                feelsLike={item.feels_like}\r\n                description={item.description}\r\n                closeHandler={() => closeHandler(item.id)}\r\n                idInfo={item.id}\r\n              />\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport 'flexboxgrid';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n} from 'react-router-dom';\r\nimport Home from './pages/home';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div>\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/\">\r\n            <Home />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}