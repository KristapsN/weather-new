{"version":3,"sources":["components/weatherCard/weatherCard.tsx","components/weatherCard/compareCard.tsx","components/input/textInput.tsx","pages/home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CompareCard","temp","minTemp","maxTemp","weather","icon","feelsLike","description","city","compareHandler","className","src","alt","type","onClick","WeatherCard","closeHandler","TextInput","cityInputHandler","cityClickHandler","value","action","onSubmit","e","preventDefault","onChange","Home","axios","defaults","params","appid","useState","forcast","setForcast","setWeather","setCity","inputCity","setInputCity","cityList","setCityList","useEffect","url","q","units","Object","entries","reduce","acc","key","get","then","response","console","log","data","main","red","green","blue","tempImage","tempColor","background","iconWeather","target","inputChangeHandler","style","backgroundImage","backgroundColor","temp_min","temp_max","feels_like","name","open","color","filter","item","map","comp","newCityList","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a682ee64.chunk.js","sourcesContent":["import React from 'react';\r\nimport './weatherCard.css';\r\n\r\ntype Props = {\r\n  temp: number | undefined;\r\n  minTemp: number | undefined;\r\n  maxTemp: number | undefined;\r\n  weather: string | undefined;\r\n  icon: string | undefined;\r\n  feelsLike: number | undefined;\r\n  description: string | undefined;\r\n  city: string | undefined;\r\n  compareHandler: ()=> void;\r\n\r\n};\r\n\r\nconst CompareCard = ({ temp, minTemp, maxTemp, weather, icon, \r\n  feelsLike, description, city, compareHandler }: Props) => {\r\n  return (\r\n    <>\r\n      <h1 className=\"city--name\">{city}</h1>\r\n      <div className='card--wrapper'>\r\n        <div className=\"main-forcast\">\r\n          <div className='main--weather'>\r\n            <img src={icon} alt=\"\" />\r\n            <span>{weather}</span>\r\n          </div>\r\n          <h1 className='temp'>{temp}°</h1>\r\n        </div>\r\n        <div className=\"secondary--forcast\">\r\n          <h2>Feels like {feelsLike}°</h2>\r\n          <span>min {minTemp}° </span>\r\n          <span>max {maxTemp}°</span>\r\n          <p>{description}</p>\r\n          <button type=\"button\" onClick={()=> compareHandler()}>Add to compare</button>\r\n        </div>\r\n      </div> \r\n    </>\r\n  );\r\n};\r\n\r\nexport default CompareCard; ","import React from 'react';\r\nimport './weatherCard.css';\r\n\r\ntype Props = {\r\n  temp: number | undefined;\r\n  minTemp: number | undefined;\r\n  maxTemp: number | undefined;\r\n  weather: string | undefined;\r\n  icon: string | undefined;\r\n  feelsLike: number | undefined;\r\n  description: string | undefined;\r\n  city: string | undefined;\r\n  closeHandler: () => void;\r\n\r\n};\r\n\r\nconst WeatherCard = ({ temp, minTemp, maxTemp, weather, icon,\r\n  feelsLike, description, city, closeHandler }: Props) => {\r\n  return (\r\n    <div className=\"compare--wrapper__big\">\r\n      <h1 className=\"city--name\">{city}</h1>\r\n      <div className='card--wrapper__compare'>\r\n        <div className='main--weather'>\r\n          <img src={icon} alt=\"\" />\r\n          <span>{weather}</span>\r\n        </div>\r\n        <h1 className='temp--small'>{temp}°</h1>\r\n        <h2>Feels like {feelsLike}°</h2>\r\n        <span>min {minTemp}° </span>\r\n        <span>max {maxTemp}° </span>\r\n        <p>{description}</p>  \r\n      </div>\r\n      <button className='close--button' type=\"button\" onClick={() => closeHandler()}>X</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherCard; ","import React from 'react';\r\nimport './input.css';\r\n\r\ntype Props = {\r\n  cityInputHandler: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  cityClickHandler: () => void; \r\n  value: string;\r\n};\r\n\r\nconst TextInput = ({ cityInputHandler, cityClickHandler, value }: Props) => {\r\n  return (\r\n    <div className='form--wrapper'>\r\n      <form \r\n        className='from'\r\n        action='submit'\r\n        onSubmit={(e) => e.preventDefault()}\r\n      >\r\n        <input \r\n          className='input'\r\n          type=\"text\"\r\n          value={value}\r\n          onChange={(e) => cityInputHandler(e)}\r\n          \r\n          \r\n        />\r\n        <button \r\n          className='form--button'\r\n          type=\"submit\"\r\n          onClick={() => cityClickHandler()}\r\n          \r\n        >Chose\r\n        </button>\r\n      </form>\r\n    </div> \r\n  );\r\n};\r\n\r\nexport default TextInput;","import React, { useEffect, useState } from 'react';\r\nimport './pages.css';\r\nimport 'flexboxgrid';\r\nimport axios from 'axios';\r\nimport WeatherCard from '../components/weatherCard/weatherCard';\r\nimport CompareCard from '../components/weatherCard/compareCard';\r\nimport TextInput from '../components/input/textInput';\r\n\r\n\r\ntype Forcast = {\r\n  temp: number | undefined;\r\n  feels_like: number | undefined;\r\n  temp_min: number | undefined;\r\n  temp_max: number | undefined;\r\n\r\n};\r\ntype Weather = {\r\n  main: string | undefined;\r\n  description: string | undefined;\r\n  icon: string | undefined;\r\n};\r\n\r\ntype CityList = {\r\n  name: string | undefined;\r\n  open: boolean | undefined;\r\n  temp: number | undefined;\r\n  main: string | undefined;\r\n  description: string | undefined;\r\n  icon: string | undefined;\r\n  feels_like: number | undefined;\r\n  temp_min: number | undefined;\r\n  temp_max: number | undefined;\r\n  color: string | undefined;\r\n\r\n};\r\n\r\nconst Home = () => {\r\n  axios.defaults.params = {\r\n    appid: '1d9b71f98edb0748224fcf68d948a166'\r\n  };\r\n\r\n  const [forcast, setForcast] = useState<Forcast>();\r\n  const [weather, setWeather] = useState<Weather>();\r\n  const [city, setCity] = useState('Riga');\r\n  const [inputCity, setInputCity] = useState('');\r\n  const [cityList, setCityList] = useState<CityList[]>([]);\r\n\r\n  const objectToApiUrl = (params: Object) => {\r\n    return Object.entries(params).reduce((acc, [key, value]) => {\r\n      let accCopy = acc;\r\n      accCopy += `${key}=${value}&`;\r\n      return accCopy;\r\n    }, 'https://api.openweathermap.org/data/2.5/weather?');\r\n  };\r\n\r\n  useEffect(() => {\r\n    const url = objectToApiUrl({\r\n      q: city,\r\n      units: 'metric',\r\n    });\r\n    axios.get(url)\r\n      .then(response => {\r\n        console.log(response.data);\r\n        setWeather(response.data.weather[0]);\r\n        setForcast(response.data.main);\r\n      });\r\n\r\n  }, [city]);\r\n\r\n  const inputChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setInputCity(e.target.value);\r\n  };\r\n  const cityClickHandler = () => {\r\n    setCity(inputCity);\r\n    setInputCity('');\r\n  };\r\n  const compareHandler = () => {\r\n    setCityList([\r\n      ...cityList,\r\n      {\r\n        name: city,\r\n        open: true,\r\n        temp: forcast?.temp,\r\n        main: weather?.main,\r\n        description: weather?.description,\r\n        icon: weather?.icon,\r\n        feels_like: forcast?.feels_like,\r\n        temp_min: forcast?.temp_min,\r\n        temp_max: forcast?.temp_max,\r\n        color: tempColor \r\n      }\r\n    ]);\r\n  };\r\n  const closeHandler = (comp: string | undefined) => {\r\n    cityList.map((item) => {\r\n      const newCityList = [...cityList];\r\n      if (item.name === comp) {\r\n        // eslint-disable-next-line no-param-reassign\r\n        item.open = !item.open;\r\n      }\r\n      setCityList(newCityList);\r\n    }\r\n    );\r\n  };\r\n\r\n  let red = 255;\r\n  let green = 255;\r\n  let blue = 255;\r\n  let tempImage = 1056;\r\n\r\n  // @ts-ignore \r\n  if (forcast?.temp > 0) {\r\n    // @ts-ignore \r\n    green -= forcast?.temp * 3.12;\r\n    // @ts-ignore \r\n    blue -= forcast?.temp * 5.1;\r\n    // @ts-ignore  \r\n  } else if (forcast?.temp <= 0) {\r\n    // @ts-ignore \r\n    green += forcast?.temp * 3.12;\r\n    // @ts-ignore \r\n    red += forcast?.temp * 5.1;\r\n  }\r\n  const tempColor = `${red},${green},${blue},0.5`;\r\n  // @ts-ignore \r\n  if (weather?.main === 'Snow') {\r\n    tempImage = 1000;\r\n  } else if (weather?.main === 'Rain') {\r\n    tempImage = 115;\r\n  } else if (weather?.main === 'Sunny') {\r\n    tempImage = 206;\r\n  } else if (weather?.main === 'Clouds') {\r\n    tempImage = 1056;\r\n  } else {\r\n    tempImage = 114;\r\n  }\r\n\r\n  const background = `https://picsum.photos/id/${tempImage}/1000/350/?blur=7`;\r\n  const iconWeather = `http://openweathermap.org/img/wn/${weather?.icon}@2x.png`;\r\n\r\n\r\n  return (\r\n    <div className='container'>\r\n      <div className=\"row\">\r\n        <div\r\n          className=\"col-xs-offset-3 col-xs-6\"\r\n        >\r\n          <TextInput\r\n            value={inputCity} \r\n            cityInputHandler={(e) => inputChangeHandler(e)}\r\n            cityClickHandler={cityClickHandler}\r\n          />\r\n          <div\r\n            className=\"card--background\"\r\n            style={{\r\n              backgroundImage: `url(${background})`\r\n            }}\r\n          >\r\n            <div\r\n              className=\"color--overlay\"\r\n              style={{\r\n                backgroundColor: `rgb(${tempColor})`,\r\n              }}\r\n            >\r\n              <WeatherCard\r\n                city={city}\r\n                temp={forcast?.temp}\r\n                minTemp={forcast?.temp_min}\r\n                maxTemp={forcast?.temp_max}\r\n                weather={weather?.main}\r\n                icon={iconWeather}\r\n                feelsLike={forcast?.feels_like}\r\n                description={weather?.description}\r\n                compareHandler={() => compareHandler()}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n\r\n        {cityList.filter(item => item.open === true).map((item) =>\r\n          <div key='1' className=\"col-xs-3\">\r\n            <div\r\n              className=\"color--overlay__compare\"\r\n              style={{\r\n                backgroundColor: `rgb(${item.color})`,\r\n              }}\r\n            > \r\n              <CompareCard\r\n                city={item.name}\r\n                temp={item.temp}\r\n                minTemp={item.temp_min}\r\n                maxTemp={item.temp_max}\r\n                weather={item.main}\r\n                icon={`http://openweathermap.org/img/wn/${item.icon}@2x.png`}\r\n                feelsLike={item.feels_like}\r\n                description={item.description}\r\n                closeHandler={() => closeHandler(item.name)}\r\n              />\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport 'flexboxgrid';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n} from 'react-router-dom';\r\nimport Home from './pages/home';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div>\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/\">\r\n            <Home />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}